diff --git a/hake/Main.hs b/hake/Main.hs
index 87d086392..8011d183f 100644
--- a/hake/Main.hs
+++ b/hake/Main.hs
@@ -345,7 +345,7 @@ printSrcLoc sl =
     (show $ srcColumn sl)
 
 -- Parse a Hakefile, prior to wrapping it with Hake definitions
-parseHake :: FilePath -> String -> Either Exp HakeError
+parseHake :: FilePath -> String -> Either (Exp SrcSpanInfo) HakeError
 parseHake filename contents =
     case result of
         ParseOk e -> Left e
@@ -403,8 +403,42 @@ compileRule (t:ts) =
 -- primitives, and generate the correct expression type (HRule).  The result
 -- is an unevaluted function [FilePath] -> HRule, that needs to be supplied
 -- with the list of all files in the source directory.
-wrapHake :: FilePath -> Exp -> Exp
+wrapHake :: FilePath -> Exp SrcSpanInfo -> Exp SrcSpanInfo
 wrapHake hakefile hake_exp =
+  Paren loc (
+    Lambda loc [PVar loc (Ident loc "sourceDB")] (
+      Let loc (
+        BDecls loc [
+          FunBind loc [
+             -- This is 'find'
+            Match loc (Ident loc "find")
+              [PVar loc (Ident loc "fn"), PVar loc (Ident loc "arg")]
+              -- Nothing
+              (UnGuardedRhs  loc
+                  (Paren  loc (App loc  (App loc  (App loc  (Var loc  (UnQual loc  (Ident loc  "fn")))
+                                        (Var loc  (UnQual loc  (Ident loc  "sourceDB"))))
+                                   (Lit loc  (String loc hakefile "")))
+                         (Var loc  (UnQual loc  (Ident loc  "arg"))))))
+              (Just (BDecls loc  []))
+          ],
+
+          FunBind loc [
+            Match loc
+              (Ident loc "build") -- This is 'build'
+              [PVar loc (Ident loc "a")]
+              (UnGuardedRhs loc
+                  (App loc (App loc (App loc (Paren loc (App loc (Var loc (UnQual loc (Ident loc "buildFunction")))
+                                             (Var loc (UnQual loc (Ident loc "a")))))
+                                 (Var loc (UnQual loc (Ident loc "sourceDB"))))
+                            (Lit  loc(String loc hakefile "")))
+                       (Var loc (UnQual loc (Ident loc "a")))))
+              (Just (BDecls loc []))
+          ]
+        ]
+      ) (Paren loc (App loc (Con loc (UnQual loc (Ident loc "Rules"))) hake_exp))
+    )
+  )
+{-
     Paren (
     Lambda dummy_loc [PVar (Ident "sourceDB")] (
     Let (BDecls
@@ -436,10 +470,11 @@ wrapHake hakefile hake_exp =
         (Paren (App (Con (UnQual (Ident "Rules")))
                     hake_exp))
     ))
+    -}
     where
         dummy_loc = SrcLoc { srcFilename = "<hake internal>",
                                 srcLine = 0, srcColumn = 0 }
-
+        loc = Language.Haskell.Exts.noSrcSpan
 --
 -- Makefile generation
 --
